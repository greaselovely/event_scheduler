from barnum import gen_data
import json
import random_address
import random
import pathlib

"""
I wrote this to generate a dictionary of fake addresses 
for the purpose of simply testing out the event_scheduler.py
and needed a reason to understand random data generation in
general, so I use barnum to help generate some basic data
and stitch it together to make a dictionary that the event_scheduler.py
understands.  Writes it to to files for it to load to schedule things.
"""

###

breakfast_filename = "breakfast.json"
happyhour_filename = "happyhour.json"

###


local_path = pathlib.Path(__file__).parent
breakfast_fullpath = pathlib.Path.joinpath(local_path, breakfast_filename)
happyhour_fullpath = pathlib.Path.joinpath(local_path, happyhour_filename)

breakfast = {"north":{}, "south":{}}
happyhour = {"north":{}, "south":{}}

street_suffix = ["Aly", "Anx", "Arc", "Ave", "Byu", "Bch", "Bnd", "Blf",
				"Blfs", "Btm", "Blvd", "Br", "Brg", "Brk", "Brks", "Bg", "Bgs", 
				"Byps", "Cp", "Cnyn", "Cpe", "Cswy", "Ctr", "Ctrs", "Cir", "Cirs",
				"Clf", "Clfs", "Clb", "Cmn", "Cmns", "Cor", "Cors", "Crse", "Ct", 
				"Cts", "Cv", "Cvs", "Crk", "Cres", "Crst", "Xing", "Xrd", "Curv", 
				"Dl", "Dm", "Dv", "Dr", "Drs", "Est", "Ests", "Expwy", "Ext",
				"Exts", "Fall", "Fls", "Frry", "Fld", "Flds", "Flt", "Flts", 
				"Frd", "Frds", "Frst", "Frg", "Frgs", "Frk", "Frks", "Ft", 
				"Fwy", "Grdn", "Gdns", "Gtwy", "Gln", "Glns", "Grn", "Grns",
				"Grv", "Grvs", "Harb", "Hbrs", "Hvn", "Hts", "Hwy", "Hl", 
				"Hls", "Hllw", "Inlt", "Is", "Iss", "Isle", "Jct", "Jcts", 
				"Ky", "Kys", "Knol", "Knls", "Lk", "Lks", "Land", "Lndg", 
				"Ln", "Lgt", "Lgts", "Lf", "Lck", "Lcks", "Ldge", "Lp", 
				"Mall", "Mnr", "Mnrs", "Mdw", "Mdws", "Mews", "Ml", "Mls", 
				"Msn", "Mtwy", "Mt", "Mtn", "Mtns", "Nck", "Orch", "Ovl", 
				"Opas", "Prk", "Park", "Pkwy", "Pkwys", "Pass", "Psge", 
				"Path", "Pike", "Pne", "Pnes", "Pl", "Pln", "Plns", "Plza",
				"Pts", "Prt", "Prts", "Pr", "Rad", "Ramp", "Rnch", "Rpd", 
				"Rpds", "Rst", "Rdge", "Rdgs", "Riv", "Rd", "Rds", "Rte", 
				"Row", "Rue", "Run", "Shl", "Shls", "Shr", "Shrs", "Skwy", 
				"Spg", "Spgs", "Spur", "Sqr", "Sqs", "Stn", "Strm", "St", 
				"Sts", "Smt", "Ter", "Trwy", "Trce", "Trk", "Trfy", "Trl", 
				"Trlr", "Tunl", "Tpke", "Upas", "Un", "Uns", "Vly", "Vlys", 
				"Via", "Via", "Vw", "Vws", "Vlg", "Vlgs", "Vl", "Vis", "Walk", 
				"Wall", "Wy", "Wl", "Wls"
]

def gen_event_location() -> dict:
	"""
	Generates a fake company name, fake address and the city, 
	state and zip are generated based on a random real zip code 
	generated by random_address
	"""
	zip, city, state = "","",""		# helps resolve UnboundLocalError if random_address pukes (which it does)
	location = gen_data.create_company_name()
	street_num = random.randint(1000, 9999)
	street_name = gen_data.create_name(full_name=False)
	street_sfx = random.choice(street_suffix)
	random_zip_code = random_address.real_random_address().get('postalCode')
	try:
		zip, city, state = gen_data.create_city_state_zip(zip_code=random_zip_code)
	except KeyError:
		gen_event_location()	# There's some zip codes that appear to be fubar, so just force recursion until it works.

	address = f"{street_num} {street_name} {street_sfx}, {city}, {state} {zip}"
	final_address = {location : address}
	return final_address

	

def main():
	"""
	Generates and updates the dictionary with 10 event locations, 
	and there are two keys in each dict, north and south. This was
	originally done to accomodate people being able to attend an 
	event that was closer to them in a time of day that was easier.
	Then we write the dict to a file for use elsewhere.
	"""

	for _ in range(10):
		breakfast["north"].update(gen_event_location())
		breakfast["south"].update(gen_event_location())
		happyhour["north"].update(gen_event_location())
		happyhour["south"].update(gen_event_location())
		

	# have to cast to str othewise we can't write the files
	with open(breakfast_fullpath, "w") as bfile:
		json.dump(breakfast, bfile, indent=2)
		# bfile.write(str(breakfast).replace("\'", "\""))	# replace single with double so it's proper JSON
	with open(happyhour_fullpath, "w") as hfile:
		json.dump(happyhour, hfile, indent=2)
		# hfile.write(str(happyhour).replace("\'", "\""))	# replace single with double so it's proper JSON

if __name__ == "__main__":
	main()